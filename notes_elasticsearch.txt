nodes kunnen verschillende taken hebben. 1 daarvan is het houden van data.
Als je een node maakt (instal van elasticsearch opstart) zit hij automatischi n 1 cluster.

Data is stored as documents.
Document is een JSON object met welke data je daarvan wil opslaan.

{ 
name: "Piet",
category: "fFruits",
brand: "Cuties",
price: "4.29"
}    <--- 1 document met altijd een unique ID

Documents die bij elkaar horen qua categorie bijvoorbeeld kunnen het beste bij elkaar gegroupeerd worden.
Documenten die bij elkaar gegroepeerd zijn, zitten in dezelfde index.
Een index is dus gewoon iets dat gebruikt wordt om documents te groeperen en organiseren.
"indices are used to group documents taht are related to eachother, so we know where to find certained information"

Een index is niet echt iets dat documents stored/ waar documents in zitten opgeslagen. HEt is iets virtueels dat gewoon bijhoudt waar
documents zijn opgeslagen. Een index kan je dus niet op disk vinden

Wat je wel op disk kan vinden is een shard. Een shard is daadwerkelijk waar de data is stored.

Als je een index creeerd komt zit er 1 shard in by default. en een shard is assigned to a node.

De hoeveelheid documenten een shard kan hebben ligt aan de capaciteit van de node.

Je kan het configureren zodat een index meerdere shards heeft. Dit heet sharding. 



-----



Men kan meerdere shards maken over meerdere nodes om aan data storage capaciteit te voldoen.

Je kan meerdere shards maken, de totale hoeveelheid data verspreiden over die shards zodat de searchspeed verhoogd wordt. Omdat elke shard
concurrently opereerd. Een search runned paralel over alle shards

Je kan meeredere shards en nodes toevoegen as the need arises. Je kan hierin eindeloos horizontaal door groeien.

In een shard hold je documents, maar in een shard voor je ook de searchquerries uit.  

Wat wordt gedaan is dat er copies gemaakt worden van shards en deze worden opgeslagen over various nodes.
Zodat elke shard wel ergens een copy heeft.

De voordelen hiervan zijn:
- Er is een backup als shards verloren gaan bij het uitvallen van een node.
- betere performance. -> omdat replica's deel van de queries kunnen overnemen. (queries worden altijd uitgevoerd op shards)
Aangezien dat een replica dezelfde informatie bevat, kunnen queries die normaal naar de primary shard zouden gaan, op de replica uitgevoerd
worden.

Dus:
- data verdelen over shards maakt sneller binnen 1 enkele querie: deze wordt concurrent uitegoerd op de shards. 
- shard replicas maakt sneller over meerdere querries: omdat sommige querries in geheel naar replicas doorverwezen worden