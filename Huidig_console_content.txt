# Hello and welcome to this introduction to the api of elastic search. The intention is to get some quick hands on experience with the functionalities of elastic api.
# I prepared some querries with elaboration about the principles.
# I hope this offers a nice first impression.

# feel free to change the data / querries and play around :P

# TO RUN A QUERRY SELECT THE TOP LINE OF THAT PARTICULAR QUERRY AND PRESS THE PLAY ICON


# Contents
#
# 1. JSON Documents
# 2. CRUD - Create / Read / Update / Delete
# 3. geosearch and mapping




# Elasticsearch stores documents using the JSON format
# To quickly mention JSON, this is a sample JSON document

{
 "name" : "Elastic",
 "location" : {
 "state" : "Co",
 "zipcode" : 80006
 }
}




# one uses elastic by calling it's api endpoints. Elastic uses REST api. It has the methods GET, PUT, POST, UPDATE and DELETE. The general syntax is:


# METHOD _API/parameter

# so if i wanted to check my cluster health, i would call the _cluster API and send "health" as parameter. You can try it if you want.


GET _cluster/health

# like we said, all documents are stored in an index. If we wanna add a document the syntax is POST /index/_doc

POST /books/_doc
{
 "title":"great waves",
 "writer": "jack stofr"
}

# We now added a document into the newly created book index (elastic does this automatically for us in the above querry)

# Let's search the index using a GET command
GET /books/_search

# The bit where it says for example:
#
# "hits": {
#  "total": {
#     "value": 1,
#     "relation": "eq"
#   },
#

# tells us there is 1 hit. eq means equal to 1. in some big data sets elastic will stop at a maximum number and will then give you "gte" instead of "eq" meaning there is still more to be found. 


# We'll dive deeper into the search API soon, for now, let's focus on indexing documents

# Elasticsearch uses a REST API, and it matters whether we use POST vs PUT
# If you use PUT, you have to add an ID
# If we run the following we'll get an error since no id was given

PUT /books/_doc
{
 "title":"small waves :(",
 "writer": "James stofr"
}

# but if we specify an id..
PUT /books/_doc/1
{
  "title": "small waves :(",
  "writer": "James stofr"
}

# POST creates the document's ID for us
POST /books/_doc
{
  "title": "big boi waves :o",
  "writer": "ratchet dilaird"
}



# note by the way, that if we PUT a document with the same id multiple time,
# it increments the version for us :) and tells us "result": "updated"

PUT /books/_doc/1
{
 "title":"small waves :(",
 "writer": "James stofr"
}


# Indexing the document automatically created the index for us, named "books" like metnioned before.

# Documents are saved within an index. An index doesn't actually exist on disk. It's only virtual
# Indexes are used to categorize your documents with their types. Just to offer us some structure really. Nothing else.
# It is recommeneded to store only one type per index.


#in the future Instead of dynamically creating the index by adding a document, we can create the index beforehand.

# deletes the index we made automatically earlier.
DELETE /books

# explicitly creates the index books with costum settings
# We'll use 1 shard for this example, and no replicas, we probably wouldn't want to do this in production

PUT /books
{
 "settings": {
 "index.number_of_shards": 1,
 "index.number_of_replicas": 0
 }
}


# When you need to index a lot of docs, you should use the bulk API, you may see signficant performance benefits.

# note: when using bulk, an object can only consist of 1 line.. i know.. don't ask... it took so long to figure out that was the cause of the error T_T

POST /books/_bulk
{"index":{"_id":1 }}
{"name":"big boi waves", "writer":"ratchet dilaird", "rating": 78, "vendor location":{"type":"Point","coordinates":[-122.400152,37.793199]}}
{"index":{"_id":2 }}
{"name":"big boi buildings", "writer":"cat", "rating": 89, "vendor location":{"type":"Point","coordinates":[-122.409752,37.752807]}}
{"index":{"_id":3 }}
{"name":"small boi buildings :(", "writer":"dogson barf barf", "rating": 80, "vendor location":{"type":"Point","coordinates":[-50.409061,11.783527]}}
{"index":{"_id":4 }}
{"name":"endles pride", "writer":"jackson stelman", "rating": 79, "vendor location":{"type":"Point","coordinates":[-122.388478,37.75072]}}
{"index":{"_id":5 }}
{"name":"small boi waves :(", "writer":"mr.idonotlikesmallwaves", "rating": 30, "vendor location":{"type":"Point","coordinates":[-122.481299,37.747228]}}
{"index":{"_id":6 }}
{"name":"eating without effort", "writer":"cat", "rating": 100, "vendor location":{"type":"Point","coordinates":[-122.481299,37.747228]}}
{"index":{"_id":7 }}
{"name":"building new world", "writer":"cat_cant_be_a_writer_lol?", "rating": 12, "vendor location":{"type":"Point","coordinates":[-122.400152,23.793300]}}
{"index":{"_id":8 }}
{"name":"Harry potter", "writer":"JK Rowling", "rating": 41, "vendor location":{"type":"Point","coordinates":[-122.400152,37.793199]}}
{"index":{"_id":9 }}
{"name":"barry Alan and the small boi waves", "writer":"JK Rowling", "rating": 4, "vendor location":{"type":"Point","coordinates":[10.444152,9.191199]}}


#check the index again. 
GET /books/_search


# let's look into search :


# Let's find all instances that mention buildings


GET /books/_search
{
 "query": {
 "match": {
 "name": "buildings"
 }
 }
}

# We can also list all titles containing small boi.
# we use match_phrase here since small boi is 2 words

GET /books/_search
{
  "query": {
    "match_phrase": {
      "name": "small boi"
    }
  }
}

# Results are ranked by relevance (_score value per instance) remember how that was nice for an search app? ;)


# note, if you change "match_phrase" to "match" it will give you an instance with "big boi buildings" as name, since it 
# searches for both "small" and "boi" independently. 

GET /books/_search
{
  "query": {
    "match": {
      "name": "small boi"
    }
  }
}



# We can also do boolean combinations of queries
# combining the 2 together. in the below statement you search for the words small and boi 
# independant from one another, and the words "barry alan" as a phrase. This is combined in the 
# querry
GET /books/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "name": "small boi"
          }
        },
        {
          "match_phrase": {
            "name": "barry Alan"
          }
        }
      ]
    }
  }
}
#
# Or negate parts of a query, maybe you don't like waves
GET /books/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "name": "waves"
          }
        }
      ]
    }
  }
}
#__________________________________________________
# Combinations can be boosted for different effects
# Let's emphasize places with "big" in the name using boost. This helps us define relevance in our search. ( nice for search engines )

GET /books/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match_phrase": {
            "name": {
              "query": "waves",
              "boost": 3
            }
          }
        },
        {
          "match_phrase": {
            "name": {
              "query": "buildings"
            }
          }
        }
      ]
    }
  }
}

#__________________________________________________
# Finally, we can perform filtering. For example on ranges.
# Let's find books with a rating greater than 80 and let's sort it too
# gte = Greater than or equal to.
# gt = Greater than.

GET /books/_search
{
  "query": {
    "range": {
      "rating": {
        "gte": 80
      }
    }
  },
   "sort": [
     { "rating": "desc" } 
      ]
  }
      
  
# remember how we told that apps like tinder and yelp use elasticsearch? How do they work with locations? Why can tinder match you with people close to you? it uses something called geo search within elastic! let's look into this.

# Let's find book vendors closest to us using vender location.

# Let's execute the follow geo query, sorted by distance to us (this will give an error)

GET /books/_search
{
  "sort": [
    {
      "_geo_distance": {
        "coordinates": {
          "lat": 37.783527,
          "lon": -122.409061
        },
        "order": "asc",
        "unit": "km"
      }
    }
  ]
}
# Elasticsearch doesn't know the field is a geopoint
# We must define this field as a geo point using mappings
# Mappings are helpful for defining the structure of our document, and more efficiently storing/searching the data within our index
# We have numbers/dates/strings, and geopoints, let's see what elasticsearch thinks our mapping is

GET /books/_mapping

# mapping is really just what elasticsearch thinks our variables types are. 

# you see how elastic believes our "coordinates" variable to be float? This should be coordinates




# Let's change the mapping, delete our index, and perform our bulk import again
# go ahead and delete the index books and then recreate it.

# We need to delete it, THEN create the index THEN set the mapping THEN add the data gain

DELETE books

PUT /books

# here we change the data type into geo_point. We also change rating into "long" to get the aggregations working later on.

PUT books/_mapping
{
  "properties": {
    "name": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "writer": {
      "type": "text",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "rating": {
      "type": "long",
      "fields": {
        "keyword": {
          "type": "keyword",
          "ignore_above": 256
        }
      }
    },
    "coordinates": {
      "type": "geo_point"
    }
  }
}


# now add all the data back again with the bulk api. I prepared the dataset below, but do you remember what the api call was without scrolling up ;)? 

#API CALL HERE
POST /books/_bulk
{"index":{"_id":1 }}
{"name":"big boi waves", "writer":"ratchet dilaird", "rating": 78, "vendor location":{"type":"Point","coordinates":[-122.400152,37.793199]}}
{"index":{"_id":2 }}
{"name":"big boi buildings", "writer":"cat", "rating": 89, "vendor location":{"type":"Point","coordinates":[-122.409752,37.752807]}}
{"index":{"_id":3 }}
{"name":"small boi buildings :(", "writer":"dogson barf barf", "rating": 80, "vendor location":{"type":"Point","coordinates":[-122.409061,37.783527]}}
{"index":{"_id":4 }}
{"name":"endles pride", "writer":"jackson stelman", "rating": 79, "vendor location":{"type":"Point","coordinates":[-122.388478,37.75072]}}
{"index":{"_id":5 }}
{"name":"small boi waves :(", "writer":"mr.idonotlikesmallwaves", "rating": 30, "vendor location":{"type":"Point","coordinates":[-122.481299,37.747228]}}
{"index":{"_id":6 }}
{"name":"eating without effort", "writer":"cat", "rating": 100, "vendor location":{"type":"Point","coordinates":[-122.481299,37.747228]}}
{"index":{"_id":7 }}
{"name":"building new world", "writer":"cat_cant_be_a_writer_lol?", "rating": 12, "vendor location":{"type":"Point","coordinates":[-122.400152,37.793300]}}
{"index":{"_id":8 }}
{"name":"Harry potter", "writer":"JK Rowling", "rating": 41, "vendor location":{"type":"Point","coordinates":[-122.400152,37.793199]}}
{"index":{"_id":9 }}
{"name":"barry Alan and the small boi waves", "writer":"JK Rowling", "rating": 4, "vendor location":{"type":"Point","coordinates":[10.444152,9.491199]}}


#Let's quickly look at our mappings again

GET /books/_mapping

# Now we can execute our original geo query. Now that elastic knows coordinates are of type "geo_point" we can work with it :)

GET /books/_search
{
  "sort": [
    {
      "_geo_distance": {
        "coordinates": {
          "lat": 37.783527,
          "lon": -122.409061
        },
        "order": "desc",
        "unit": "km"
      }
    }
  ]
}

# See how it uses the coordinates 0.000.. , 0.000.. as a base?
# That was a very short introduction to geo queries and mappings, the goal was to get your feet wet to
# hopefuly go off and learn more


# Aggregations (one use case is faceting data) are very interesting
# We won't have time to cover aggregation in depth now, but we want to get you familiar with how they work, so you can use them on your own
# Let's search for the term "boi", and bucket results by rating score (similar to the facets you would see in an ebay site)
# Show:
#https://www.ebay.com/sch/i.html?_from=R40&_trksid=p2380057.m570.l1313.TR12.TRC2.A0.H0.Xwatc
# h.TRS0&_nkw=watch&_sacat=0

# with the aggregations we can class different ranges in the same group. 
# elastic will count those documents for you. It's listed at the bottom if the return value in the right



GET /books/_search
{
  "query": {
    "match": {
      "name": "boi"
    }
  },
  "aggregations": {
    "rating": {
      "range": {
        "field": "rating",
        "ranges": [
          {
            "key": "0-80",
            "from": 0,
            "to": 80
          },
          {
            "key": "81-90",
            "from": 81,
            "to": 90
          },
          {
            "key": "91-100",
            "from": 91,
            "to": 100
          }
        ]
      }
    }
  }
}



# This concludes the introduction of the elasticsearch api. If you made it all the way through here, congrats :) and thanks for your attention ^^